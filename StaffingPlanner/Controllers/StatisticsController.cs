/*
 * Purpose: This controller handles calling the stored procedures in the entity framework 
 *			and sends the information to the view to be turned into a google chart. 
 */
using System.Collections.Generic;
using System.Web.Mvc;
using StaffingPlanner.Models;

namespace StaffingPlanner.Controllers
{
    public class StatisticsController : Controller
    {
        private DEV_ClientOpportunitiesEntities db = new DEV_ClientOpportunitiesEntities();

        /* GET: Statistics */
        public ActionResult Index()
        {
            return View();
        }

		/*
		 *Pulls the Opportunity Status Chart information using the STATS_OPPORTUNITY_STATUS storedproc 
		 *and makes it available to be received by an AJAX call.
		 */
		[HttpGet]
		public ActionResult OpportunityStatusChartData()
		{
			var results = db.Database.SqlQuery<OpportunityStatusStats>("STATS_OPPORTUNITY_STATUS");
			List<object> chartData = new List<object>
			{
				new object[] { "Status", "Count" }
			};
			foreach (OpportunityStatusStats res in results)
			{
				if (res.Status_Count >= 1)
				{
					chartData.Add(new object[] { res.Opportunity_Status_Name, res.Status_Count });
				}
				else
				{
					chartData.Add(new object[] { res.Opportunity_Status_Name, 0 });
				}
			}
			return Json(chartData, JsonRequestBehavior.AllowGet);
		}

		/*
		*Pulls the Lost Opportunity Chart information using the STATS_LOST_OPPORTUNITY storedproc 
		*and makes it available to be received by an AJAX call.
		*/
		[HttpGet]
		public ActionResult LostOpportunityChartData()
		{
			var results = db.Database.SqlQuery<LostOpportunityStats>("STATS_LOST_OPPORTUNITY");
			List<object> chartData = new List<object>
			{
				new object[] { "Reason", "Count" }
			};
			foreach (LostOpportunityStats res in results)
			{
				if (res.Reason_Count >= 1)
				{
					chartData.Add(new object[] { res.Reason, res.Reason_Count });
				}
				else
				{
					chartData.Add(new object[] { res.Reason, 0 });
				}
			}
			return Json(chartData, JsonRequestBehavior.AllowGet);
		}

		/*
		*Pulls the Portfolio Chart information using the STATS_PORTFOLIO storedproc 
		*and makes it available to be received by an AJAX call.
		 */
		[HttpGet]
		public ActionResult PortfolioChartData()
		{
			var results = db.Database.SqlQuery<PortfolioStats>("STATS_PORTFOLIO");
			List<object> chartData = new List<object>
			{
				new object[] { "Client", "Amount" }
			};
			foreach (PortfolioStats res in results)
			{
				if (res.Value >= 1)
				{
					chartData.Add(new object[] { res.Client, res.Value });
				}
				else
				{
					chartData.Add(new object[] { res.Client, 0 });
				}
			}
			return Json(chartData, JsonRequestBehavior.AllowGet);
		}

		/*
		*Pulls the Quarterly Projected Profit Chart information using the STATS_PROJECTED_PROFITS storedproc 
		*and makes it available to be received by an AJAX call. Also converts the number to be displayed in the millions.
		*/
		[HttpGet]
		public ActionResult ProfitChartData()
		{
			var results = db.Database.SqlQuery<ProjectedProfitStats>("STATS_PROJECTED_PROFIT");
			decimal[] quarterValues = new decimal[4];

			foreach (ProjectedProfitStats res in results)
			{
				if (res.Quarter == 1)
				{
					quarterValues[0] = res.Value;
				}
				else if (res.Quarter == 2)
				{
					quarterValues[1] = res.Value;
				}
				else if (res.Quarter == 3)
				{
					quarterValues[2] = res.Value;
				}
				else
				{
					quarterValues[3] = res.Value;
				}
			}

			for(int i = 0; i < 4; i++)
			{
				quarterValues[i] = quarterValues[i] / 1000000;
			}

			List<object> chartData = new List<object>
			{
				new object[] { "Quarter", "Value" },
				new object[] { "Q1", quarterValues[0] },
				new object[] { "Q2", quarterValues[1] },
				new object[] { "Q3", quarterValues[2] },
				new object[] { "Q4", quarterValues[3] }
			};
			return Json(chartData, JsonRequestBehavior.AllowGet);
		}

		/* Autogenerated Dispose Function*/
        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                db.Dispose();
            }
            base.Dispose(disposing);
        }
    }
}
